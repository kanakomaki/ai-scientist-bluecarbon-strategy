##Next, the code estimates the radius for the end of the transition period, R2. We assume that smaller storms (Rmaxââ¤â20 km) have a ##transition region of 15 km while larger storms (Rmaxâ>â20 km) have a transition region of 25 km:
##$$ R_2 = \begin{cases} R_1 + 25 & \text{ if } R_{max} > 20\mbox{ km}\\ R_1 + 15 & \text{ if } R_{max} \le 20\mbox{ km} \end{cases} $$
##where:
##R1: Radius to the start of the transition region (km)
##R2: Radius to the end of the transition region (km)
##R2 = ifelse(Rmax > 20, R1 + 25, R1 + 15)
##Calculate wind speed at each grid point
##Next, the code models the wind speed at a location (e.g., a Manucipality center).
#As a note, this function calculates wind characteristics at a 
#single location; a later function applies this function across many grid points):
##After calculating the grid wind time series for a grid point, 
#you can input the time series for a grid point into summarize_grid_wind to
##generate overall storm summaries for the grid point. 
#This functions calculate wind characteristics at each grid point (or Manucipality center #
# for every storm observation. These characteristics are:
##vmax_gust: Maximum value of surface-level (10 meters) sustained winds, m/s, over the length of the storm at the given ##location
##vmax_sust: Maximum value of surface-level (10 meters) gust winds, in m/s, over the length of the storm at the given location
##gust_dur: Length of time, in minutes, that surface-level sustained winds were above a certain wind speed cutoff
#(e.g., 20 meters per ##second)
##sust_dur: Length of time, in minutes, that surface-level gust winds were above a certain wind speed cutoff
#(e.g., 20 meters per second)
##Determine gradient wind speed at each location
##Next, the package calculates VG(r), the gradient level 1-minute sustained wind at the grid point, which is at radius r from the tropical ##cyclone center (Cdis**t for the grid point). Note there are different equations for VG(r) for (1) the eye to the start of the transition ##region; (2) outside the transition region; and (3) within the transition region.
will1<- function(cdist, Rmax, R1, R2, vmax_gl, n, A, X1, X2 = 25){
  
  if(is.na(Rmax) || is.na(vmax_gl) ||
     is.na(n) || is.na(A) || is.na(X1)){
    return(NA)
  } else {
    
    Vi <- vmax_gl * (cdist / Rmax) ^ n
    Vo <- vmax_gl * ((1 - A) * exp((Rmax - cdist)/X1) + A * exp((Rmax - cdist) / X2))
    
    if(cdist < R1){
      wind_gl_aa <- Vi
    } else if (cdist > R2){
      wind_gl_aa <- Vo
    } else {
      eps <- (cdist - R1) / (R2 - R1)
      w <- 126 * eps ^ 5 - 420 * eps ^ 6 + 540 * eps ^ 7 - 315 *
        eps ^ 8 + 70 * eps ^ 9
      wind_gl_aa <- Vi * (1 - w) + Vo * w
    }
    
    wind_gl_aa[wind_gl_aa < 0 & !is.na(wind_gl_aa)] <- 0
    
    return(wind_gl_aa)
  }
}
##Estimate surface level winds from gradient winds
gradient_to_surface<- function(wind_gl_aa, cdist){
  if(cdist <= 100){
    reduction_factor <- 0.9
  } else if(cdist >= 700){
    reduction_factor <- 0.75
  } else {
    reduction_factor <- 0.90 - (cdist - 100) * (0.15/ 600)
  }
  # Since all manucipalities are over land, reduction factor should
  # be 20% lower than if it were over water
  reduction_factor <- reduction_factor * 0.8
  wind_sfc_sym <- wind_gl_aa * reduction_factor
  return(wind_sfc_sym)
}
##Next, the function calculates the gradient wind direction based on the bearing of a location from the storm. 
#This gradient wind direction is##calculated by adding 90 degrees to the bearing of the grid point from the storm center.
#gwd = (90 + chead) %% 360
##Calculate the surface wind direction
##The next step is to change from the gradient wind direction to the surface wind direction. To do this, the function adds an inflow angle ##to the gradient wind direction (making sure the final answer is between 0 and 360 degrees). This step is necessary because surface ##friction changes the wind direction near the surface compared to higher above the surface.
##The inflow angle is calculated as 
add_inflow<- function(gwd, cdist, Rmax){
  if(is.na(gwd) | is.na(cdist) | is.na(Rmax)){
    return(NA)
  }
  
  # Calculate inflow angle over water based on radius of location from storm
  # center in comparison to radius of maximum winds (Phadke et al. 2003)
  if(cdist < Rmax){
    inflow_angle <- 10 + (1 + (cdist / Rmax))
  } else if(Rmax <= cdist & cdist < 1.2 * Rmax){
    inflow_angle <- 20 + 25 * ((cdist / Rmax) - 1)
  } else {
    inflow_angle <- 25
  }
  
  # Add 20 degrees to inflow angle since location is over land, not water
  overland_inflow_angle <- inflow_angle + 20
  
  # Add inflow angle to gradient wind direction
  gwd_with_inflow <- (gwd + overland_inflow_angle) %% 360
  
  return(gwd_with_inflow)
}
#Add back in wind component from forward speed of storm Next, to add back in the storm's forward motion at each grid point, the code #reverses the earlier step that used the Phadke correction factor (equation 12, Phadke et al. 2003). The package calculates a constant #correction factor (correction_factor), as a function of r, radius from the storm center to the grid point, and Rmax, radius from storm #center to maximum winds.
#$$ U(r) = \frac{R_{max}r}{R_{max}^2 + r^2}F $$ where:
add_forward_speed <- function(wind_sfc_sym, tcspd_u, tcspd_v, swd, cdist, Rmax){
  # Calculate u- and v-components of surface wind speed
  swd<- swd * pi / 180
  wind_sfc_sym_u <- wind_sfc_sym * cos(swd)
  wind_sfc_sym_v <-  wind_sfc_sym * sin(swd)
  
  # Add back in component from forward motion of the storm
  correction_factor <- (Rmax * cdist) / (Rmax ^ 2 + cdist ^ 2)
  
  # Add tangential and forward speed components and calculate
  # magnitude of this total wind
  wind_sfc_u <- wind_sfc_sym_u + correction_factor * tcspd_u
  wind_sfc_v <- wind_sfc_sym_v + correction_factor * tcspd_v
  wind_sfc <- sqrt(wind_sfc_u ^ 2 + wind_sfc_v ^ 2)
  
  # Reset any negative values to 0
  wind_sfc <- ifelse(wind_sfc > 0, wind_sfc, 0)
  
  return(wind_sfc)
}
#Calculate 3-second gust wind speed from sustained wind speed
#Here is a table with gust factors based on location (Harper, Kepert, and Ginger 2010):
#Location	Gust factor 
#In-land	1.49
#Just offshore	1.36
#Just onshore	1.23
#At sea	1.11
#The stormwindmodel package uses the "in-land" gust factor value throughout.
# windspeed: track_dataのデータと仮定して　added by KK
windspeed <- data$wind
gustspeed = windspeed * 1.49
get_grid_winds<- function(hurr_track , grid_df ,tint = 0.5,gust_duration_cut = 20,sust_duration_cut = 40){
  full_track <- create_full_track(typhoon_track = TRACK_DATA, tint = tint)
  with_wind_radii <- add_wind_radii(full_track = full_track)
  
  grid_winds <- plyr::adply(grid_df, 1, calc_and_summarize_grid_wind,
                            with_wind_radii = with_wind_radii,
                            tint = tint,
                            gust_duration_cut = gust_duration_cut,
                            sust_duration_cut = sust_duration_cut)
  
  return(grid_winds)
}
add_wind_radii <-function(full_track = create_full_track()){
  
  with_wind_radii <- full_track %>%
    dplyr::mutate_(tcspd = ~ calc_forward_speed(tclat, tclon, date,
                                                dplyr::lead(tclat),
                                                dplyr::lead(tclon),
                                                dplyr::lead(date)),
                   tcdir = ~ calc_bearing(tclat, tclon,
                                          dplyr::lead(tclat),
                                          dplyr::lead(tclon)),
                   tcspd_u = ~ tcspd * cos(tcdir* pi / 180),
                   tcspd_v = ~ tcspd * sin(tcdir* pi / 180),
                   vmax_sfc_sym = ~ remove_forward_speed(vmax, tcspd),
                   over_land = ~ mapply(check_over_land, tclat, tclon),
                   vmax_gl = ~ mapply(calc_gradient_speed,
                                      vmax_sfc_sym = vmax_sfc_sym,
                                      over_land = over_land),
                   Rmax = ~ will7a(vmax_gl, tclat),
                   X1 = ~ will10a(vmax_gl, tclat),
                   n = ~ will10b(vmax_gl, tclat),
                   A = ~ will10c(vmax_gl, tclat),
                   eq3_right = ~ will3_right(n, A, X1, Rmax),
                   xi = ~ mapply(solve_for_xi, eq3_right = eq3_right),
                   R1 = ~ calc_R1(Rmax, xi),
                   R2 = ~ ifelse(Rmax > 20, R1 + 25, R1 + 15)
    ) %>%
    dplyr::select_(quote(-vmax), quote(-tcspd), quote(-vmax_sfc_sym),
                   quote(-over_land), quote(-eq3_right), quote(-xi))
  return(with_wind_radii)
}
calc_grid_wind <- function(grid_point,
                           with_wind_radii = add_wind_radii()){
  
  grid_wind <- dplyr::mutate_(with_wind_radii,
                              # Calculated distance from storm center to location
                              cdist = ~ latlon_to_km(tclat, tclon,
                                                     grid_point$glat, grid_point$glon),
                              # Calculate gradient winds at the point
                              wind_gl_aa = ~ mapply(will1, cdist = cdist, Rmax = Rmax,
                                                    R1 = R1, R2 = R2, vmax_gl = vmax_gl,
                                                    n = n, A = A, X1 = X1),
                              # calculate the gradient wind direction (gwd) at this
                              # grid point
                              chead = ~ calc_bearing(tclat, tclon,
                                                     grid_point$glat, - grid_point$glon),
                              gwd = ~ (90 + chead) %% 360,
                              # Bring back to surface level (surface wind reduction factor)
                              wind_sfc_sym = ~ mapply(gradient_to_surface,
                                                      wind_gl_aa = wind_gl_aa,
                                                      cdist = cdist),
                              # Get surface wind direction
                              swd = ~ mapply(add_inflow, gwd = gwd, cdist = cdist,
                                             Rmax = Rmax),
                              # Add back in storm forward motion component
                              windspeed = ~ add_forward_speed(wind_sfc_sym,
                                                              tcspd_u, tcspd_v,
                                                              swd, cdist, Rmax)) %>%
    dplyr::select_(~ date, ~ windspeed)
  return(grid_wind)
}
get_grid_winds <- function(hurr_track,
                           grid_df,
                           tint = 0.5,
                           gust_duration_cut = 20,
                           sust_duration_cut = 40){
  full_track <- create_full_track(typhoon_track = TRACK_DATA, tint = tint)
  with_wind_radii <- add_wind_radii(full_track = full_track)
  
  grid_winds <- plyr::adply(grid_df, 1, calc_and_summarize_grid_wind,
                            with_wind_radii = with_wind_radii,
                            tint = tint,
                            gust_duration_cut = gust_duration_cut,
                            sust_duration_cut = sust_duration_cut)
  
  return(grid_winds)
}
summarize_grid_wind <- function(grid_wind, tint = 0.5, gust_duration_cut = 20,
                                sust_duration_cut = 20){
  grid_wind_summary <- grid_wind %>%
    dplyr::mutate_(gustspeed = ~ windspeed * 1.49) %>%
    # Determine max of windspeed and duration of wind over 20
    dplyr::summarize_(vmax_gust = ~ max(gustspeed, na.rm = TRUE),
                      vmax_sust = ~ max(windspeed, na.rm = TRUE),
                      gust_dur = ~ 60 * sum(gustspeed > gust_duration_cut,
                                            na.rm = TRUE),
                      sust_dur = ~ 60 * sum(windspeed > sust_duration_cut,
                                            na.rm = TRUE)) %>%
    dplyr::mutate_(gust_dur = ~ gust_dur * tint,
                   sust_dur = ~ sust_dur * tint)
  grid_wind_summary <- as.matrix(grid_wind_summary)
  return(grid_wind_summary)
}
calc_and_summarize_grid_wind <- function(grid_point,
                                         with_wind_radii = add_wind_radii(),
                                         tint = 0.5, gust_duration_cut = 20,
                                         sust_duration_cut = 20){
  grid_wind <- calc_grid_wind(grid_point = grid_point,
                              with_wind_radii = with_wind_radii)
  grid_wind_summary <- summarize_grid_wind(grid_wind = grid_wind, tint = tint,
                                           gust_duration_cut = gust_duration_cut,
                                           sust_duration_cut = sust_duration_cut)
  return(grid_wind_summary)
  
}
#### example to calculate typhoon data for each Manucipality 
# then calculate 
wind_grids <- get_grid_winds(hurr_track=TRACK_DATA, grid_df=grid_points,tint = 0.5,gust_duration_cut = 40,sust_duration_cut = 20)
c
 get_grid_winds(hurr_track=TRACK_DATA, grid_df=grid_points,tint = 0.5,gust_duration_cut = 40,sust_duration_cut = 20)
q()
install.packages("viridisLite")
q()
summary(wind_grids_olango_df$windspeed)
summary(wind_grids_olango_df)
plot(wind_grids_olango_df$glon, wind_grids_olango_df$glat, col = "red", pch = 20)
ls()
source("typhoontrack2point_fixed.R")
source("olango_typhoon_analysis.r")
summary(wind_grids_olango_df)
library(ggplot2)
library(viridis)
# まず、単純な地図を描く
p <- ggplot(wind_grids_olango_df, aes(x = glon, y = glat, fill = windspeed)) +
  geom_tile() +  # タイルごとに色付け
  scale_fill_viridis_c(option = "plasma", na.value = "grey50") +  # 色をちゃんと設定
  coord_fixed() +  # 地図の縦横比を合わせる
  labs(title = "Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Wind Speed (m/s)") +
  theme_minimal()
# 画面表示
print(p)
# pngファイルにも保存
ggsave("windspeed_heatmap.png", plot = p, width = 10, height = 8, dpi = 300)
plot(wind_grids_olango_df$glon, wind_grids_olango_df$glat, col = "red", pch = 20, cex = 0.5)
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 100) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma") +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma") +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(30, 50)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(40, 50)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(38, 45)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(40, 43)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
summary(wind_grids_olango_df)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 42)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 80) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 43)) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 50) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 43), oob = scales::squis) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 200) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 43), oob = scales::squis) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = mean, bins = 200) +  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 43), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(41, 43), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(43, 50), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(43, 60), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(43, 80), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(55, 70), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, z = windspeed)) +
  stat_summary_2d(fun = max, bins = 100) +   # mean -> max に変える+  # ←ここでグリッド粗さ決める（100×100に分割）
  scale_fill_viridis_c(option = "plasma", limits = c(60, 70), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Binned Maximum Wind Speed (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", fill = "Mean Wind Speed") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = windspeed)) +
  geom_point(size = 0.5) +  # 超小さな点でプロット
  scale_color_viridis_c(option = "plasma", limits = c(20, 70), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Wind Speed Scatter (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", color = "Wind Speed (m/s)") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = windspeed)) +
  geom_point(size = 0.5) +  # 超小さな点でプロット
  scale_color_viridis_c(option = "plasma", limits = c(38, 45), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Wind Speed Scatter (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", color = "Wind Speed (m/s)") +
  theme_minimal()
library(ggplot2)
library(viridis)
# テストデータ
test_df <- data.frame(
  x = runif(100, 0, 10),
  y = runif(100, 0, 10),
  value = runif(100, 20, 70)
)
# テストプロット
ggplot(test_df, aes(x = x, y = y, color = value)) +
  geom_point(size = 3) +
  scale_color_viridis_c(option = "plasma") +
  theme_minimal()
library(ggplot2)
library(viridis)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = windspeed)) +
  geom_point(size = 0.5) +
  scale_color_viridis_c(option = "plasma", limits = c(0, 100), oob = scales::squish) +
  coord_fixed() +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = log1p(windspeed))) +
  geom_point(size = 0.5) +
  scale_color_viridis_c(option = "plasma") +
  coord_fixed() +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = log1p(windspeed))) +
  geom_point(size = 0.5) +
  scale_color_viridis_c(option = "plasma") +
  coord_fixed() +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = 10*windspeed)) +
  geom_point(size = 0.5) +  # 超小さな点でプロット
  scale_color_viridis_c(option = "plasma", limits = c(38, 45), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Wind Speed Scatter (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", color = "Wind Speed (m/s)") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = 10*windspeed)) +
  geom_point(size = 0.5) +  # 超小さな点でプロット
  scale_color_viridis_c(option = "plasma", limits = c(380, 450), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Wind Speed Scatter (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", color = "Wind Speed (m/s)") +
  theme_minimal()
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = windspeed)) +
  geom_histogram(bins = 50, fill = "skyblue", color = "black") +
  labs(title = "Histogram of Wind Speed",
       x = "Wind Speed (m/s)", y = "Count") +
  theme_minimal()
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, color = windspeed)) +
  geom_point(size = 0.5) +  # 超小さな点でプロット
  scale_color_viridis_c(option = "plasma", limits = c(20, 65), oob = scales::squish) +
  coord_fixed() +
  labs(title = "Wind Speed Scatter (Typhoon Haiyan)",
       x = "Longitude", y = "Latitude", color = "Wind Speed (m/s)") +
  theme_minimal()
q()
source("olango_typhoon_analysis.r")
source("olango_typhoon_analysis.r")
source("olango_typhoon_analysis.r")
class(wind_grids_olango_df)
str(wind_grids_olango_df)
colnames(wind_grids_olango_df)
source("olango_typhoon_analysis.r")
str(wind_grids_olango_df)
head(wind_grids_olango_df)
library(ggplot2)
ggplot(wind_grids_olango_df, aes(x = glon, y = glat, fill = windspeed)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma") +
  coord_fixed() +
  labs(title = "Maximum Wind Speed Map",
       x = "Longitude", y = "Latitude", fill = "Wind Speed (m/s)") +
  theme_minimal()
str(wind_grids_olango_df)
head(wind_grids_olango_df)
str(wind_grids_olango_df)
head(wind_grids_olango)
q()
ls()
result_df
result_list
q()
summary(full_track$vmax)
full_track <- read.csv("_full_track.csv")
summary(full_track$vmax)
summary(full_track)
full_track_cebu <- full_track %>%
  filter(
    tclat >= 9, tclat <= 11,
    tclon >= 123, tclon <= 124.5
  )
full_track_cebu <- full_track %>%
  filter(
    tclat >= 9, tclat <= 11,
    tclon >= 123, tclon <= 124.5
  )
full_track_cebu <- full_track
  filter(
    tclat >= 9, tclat <= 11,
    tclon >= 123, tclon <= 124.5
  )
library(dplyr)
full_track_cebu <- full_track %>%
  filter(
    tclat >= 9, tclat <= 11,
    tclon >= 123, tclon <= 124.5
  )
full_track_cebu
results_cebu <- get_grid_winds(full_track_cebu, grid_df)
get_grid_winds <- function(typhoon_track, grid_df, tint = 6.0) {
  # 1. 台風経路データを補間してフルのトラックを取得（日時、緯度、経度、vmax[m/s]）
#  full_track <- create_full_track(typhoon_track, tint = tint)
  # 台風ごとにcreate_full_trackを個別に実行して、全部まとめる
  full_track <- typhoon_track %>%
#    group_by(STORMNAME) %>%
    group_by(storm_id) %>%
    group_modify(~ create_full_track(.x, tint = 6.0)) %>%
    ungroup()   # ←ここで必ずungroupしておく

  write.csv(full_track, "_full_track.csv", row.names = FALSE)
  message(paste0("Finished: full_tack"))
  
  # 2. 距離減衰モデルを定義する関数
  #    （例：50km以内=減衰なし、100kmで50%減衰、200kmで75%減衰、それ以上は90%減衰）
  decay_factor <- function(dist_km) {
    if (is.na(dist_km)) {
    return(NA)  # あるいはreturn(0)でもいい（どっちがいいかは設計による）
    }
    if (dist_km <= 50) {
      return(1.0)    # 50 km以内では風速そのまま（減衰率0%）
    } else if (dist_km <= 100) {
      return(0.50)   # 100 kmで風速50%に減衰
    } else if (dist_km <= 200) {
      return(0.25)   # 200 kmで風速25%に減衰
    } else {
      return(0.10)   # 200 km以上は風速10%まで減衰
    }
  }

  # 3. 各グリッド地点について、フルトラック上の各時刻の風速を計算し最大値を求める
  result_list <- list()  # 結果格納用リスト
  for (i in 1:nrow(grid_df)) {
    # グリッドの位置（緯度・経度）
    glat <- grid_df$glat[i]
    glon <- grid_df$glon[i]
    message(paste0("GRID: glat, glon = ", glat, ", ", glon, " (", i, "/", nrow(grid_df), ")"))

    # このグリッド地点における風速の最大値を初期化
    max_wind <- 0

    # フルトラックの各時点について風速を計算
    for (j in 1:nrow(full_track)) {
      # 台風位置（緯度・経度）とそのときのvmax
      track_lat  <- full_track$latitude[j]
      track_lon  <- full_track$longitude[j]
      track_wind <- full_track$vmax[j]        # 台風の最大風速 (m/s) at time j

      # グリッドと台風位置の距離を計算 (km)
      dist_km <- latlon_to_km(track_lat, track_lon, glat, glon)
      if (is.na(dist_km) || dist_km > 500) next  # 500km以上は無視

      # 距離減衰モデルを適用し、グリッド上の風速を計算
      wind_at_grid <- track_wind * decay_factor(dist_km)

      # 風速の最大値を更新
      if (!is.na(wind_at_grid) && !is.na(max_wind) && wind_at_grid > max_wind) {
        max_wind <- wind_at_grid
      }
    }

    # グリッド地点ごとの結果をデータフレームとして保存
    result_list[[i]] <- data.frame(glat = glat, glon = glon, windspeed = max_wind)
  }

  # リストを結合して結果のデータフレームを作成し返す
  result_df <- do.call(rbind, result_list)
  message(paste0("result_df FINISHED: ", nrow(result_df), " rows"))
  return(result_df)
}
results_cebu <- get_grid_winds(full_track_cebu, grid_df)
decay_factor <- function(dist_km) {
    if (is.na(dist_km)) {
    return(NA)  # あるいはreturn(0)でもいい（どっちがいいかは設計による）
    }
    if (dist_km <= 50) {
      return(1.0)    # 50 km以内では風速そのまま（減衰率0%）
    } else if (dist_km <= 100) {
      return(0.50)   # 100 kmで風速50%に減衰
    } else if (dist_km <= 200) {
      return(0.25)   # 200 kmで風速25%に減衰
    } else {
      return(0.10)   # 200 km以上は風速10%まで減衰
    }
  }
result_list <- list()  # 結果格納用リスト
  for (i in 1:nrow(grid_df)) {
    # グリッドの位置（緯度・経度）
    glat <- grid_df$glat[i]
    glon <- grid_df$glon[i]
    message(paste0("GRID: glat, glon = ", glat, ", ", glon, " (", i, "/", nrow(grid_df), ")"))

    # このグリッド地点における風速の最大値を初期化
    max_wind <- 0

    # フルトラックの各時点について風速を計算
    for (j in 1:nrow(full_track)) {
      # 台風位置（緯度・経度）とそのときのvmax
      track_lat  <- full_track$latitude[j]
      track_lon  <- full_track$longitude[j]
      track_wind <- full_track$vmax[j]        # 台風の最大風速 (m/s) at time j

      # グリッドと台風位置の距離を計算 (km)
      dist_km <- latlon_to_km(track_lat, track_lon, glat, glon)
      if (is.na(dist_km) || dist_km > 500) next  # 500km以上は無視

      # 距離減衰モデルを適用し、グリッド上の風速を計算
      wind_at_grid <- track_wind * decay_factor(dist_km)

      # 風速の最大値を更新
      if (!is.na(wind_at_grid) && !is.na(max_wind) && wind_at_grid > max_wind) {
        max_wind <- wind_at_grid
      }
    }

    # グリッド地点ごとの結果をデータフレームとして保存
    result_list[[i]] <- data.frame(glat = glat, glon = glon, windspeed = max_wind)
  }
result_list <- list()  # 結果格納用リスト
  for (i in 1:nrow(grid_df)) {
    # グリッドの位置（緯度・経度）
    glat <- grid_df$glat[i]
    glon <- grid_df$glon[i]
    message(paste0("GRID: glat, glon = ", glat, ", ", glon, " (", i, "/", nrow(grid_df), ")"))

    # このグリッド地点における風速の最大値を初期化
    max_wind <- 0

    # フルトラックの各時点について風速を計算
    for (j in 1:nrow(full_track)) {
      # 台風位置（緯度・経度）とそのときのvmax
      track_lat  <- full_track$latitude[j]
      track_lon  <- full_track$longitude[j]
      track_wind <- full_track$vmax[j]        # 台風の最大風速 (m/s) at time j

      # グリッドと台風位置の距離を計算 (km)
      dist_km <- latlon_to_km(track_lat, track_lon, glat, glon)
      message(paste0("dixt_km = ", dist_km, " km"))
      if (is.na(dist_km) || dist_km > 500) next  # 500km以上は無視

      # 距離減衰モデルを適用し、グリッド上の風速を計算
      wind_at_grid <- track_wind * decay_factor(dist_km)

      # 風速の最大値を更新
      if (!is.na(wind_at_grid) && !is.na(max_wind) && wind_at_grid > max_wind) {
        max_wind <- wind_at_grid
      }
    }

    # グリッド地点ごとの結果をデータフレームとして保存
    result_list[[i]] <- data.frame(glat = glat, glon = glon, windspeed = max_wind)
  }
q()
